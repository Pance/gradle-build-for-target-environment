apply plugin: 'java'

String targetEnvironment
if (project.hasProperty('env')
    && (env.toUpperCase().equals('DEV')
    || env.toUpperCase().equals('CERT')
    || env.toUpperCase().equals('PROD'))) {
  targetEnvironment = env.toUpperCase()
} else if(!project.hasProperty('env')){
  targetEnvironment = 'dev'.toUpperCase()
}
else
  throw new InvalidUserDataException("Incorrect environment specified! Environment must be DEV, CERT, or PROD.\n Environment = " + env)

println "**Selected environment is: " + targetEnvironment

repositories {
  maven {url "**The URL to some maven repo" }
}

// Lets assume that our maven repo has the following jars:
//  SomeDependency:SomeDependency-DEV:0.2.1
//  SomeDependency:SomeDependency-CERT:0.2.1
//  SomeDependency:SomeDependency-PROD:0.2.1

String environmentSpecificDependencyJar = "SomeDependency:SomeDependency-" + targetEnvironment + ":0.2.1"

dependencies {
  compile environmentSpecificDependencyJar
}

// In our project, we have the following directories with properties files:
//  ./src/main/resources/global/
//  ./src/main/resources/dev/
//  ./src/main/resources/cert/
//  ./src/main/resources/prod/

sourceSets.main.resources.srcDirs = ['src/main/resources/global']
switch (targetEnvironment) {
  case "PROD":
    sourceSets.main.resources.srcDirs "src/main/resources/prod"
    break;
  case "CERT":
    sourceSets.main.resources.srcDirs "src/main/resources/cert"
    break;
  case "DEV":
    sourceSets.main.resources.srcDirs "src/main/resources/dev"
    break;
}

println "**Loaded SourceSets for resources:\n" + sourceSets.main.resources.srcDirs
